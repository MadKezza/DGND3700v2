#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/sbin/scripts

UTC=yes

mount -n -t proc proc /proc
mount -n -t sysfs sysfs /sys
mount -n -t ramfs ramfs /home
mount -n -t ramfs ramfs /tmp
mount -n -t ramfs ramfs /mnt
mount -n -t ramfs ramfs /dev
mkdir /dev/pts
mount -t devpts devpts /dev/pts

# build var directories
/bin/mkdir -m 0777 /tmp/var
/bin/mkdir -m 0777 /var/lock
/bin/mkdir -m 0777 /var/log
/bin/mkdir -m 0777 /var/run
/bin/mkdir -m 0777 /var/tmp
/bin/mkdir -m 0777 /var/w
/bin/mkdir -m 0777 /tmp/etc
/bin/mkdir -m 0755 /etc/dnrd
#/bin/mkdir -m 0777 /tmp/mnt
/bin/mkdir -m 0777 /mnt/shares
/bin/mkdir -m 0777 /var/run/bftpd
/bin/mkdir -m 0777 /tmp/nv
/bin/mkdir -m 0777 /tmp/w
/bin/mkdir -m 0777 /mnt/smt

/bin/cp -a /usr/etc/* /etc
/bin/cp -a /usr/dev/* /dev/

# insert usb modules
/sbin/insmod /lib/modules/ehci-hcd.ko
/sbin/insmod /lib/modules/ohci-hcd.ko

# insert modules
/sbin/insmod /lib/modules/bcm_ingqos.ko
/sbin/insmod /lib/modules/bcm_bpm.ko
/sbin/insmod /lib/modules/pktflow.ko
/sbin/insmod /lib/modules/bcmfap.ko
/sbin/insmod /lib/modules/bcmxtmcfg.ko
/sbin/insmod /lib/modules/adsldd.ko
/sbin/insmod /lib/modules/bcm_enet.ko
/sbin/insmod /lib/modules/bcmarl.ko
/sbin/insmod /lib/modules/bcmvlan.ko
/sbin/insmod /lib/modules/pwrmngtd.ko

#use switch_tool to set eth4 work as wan port
/usr/sbin/switch_tool setwanport eth4 1

/sbin/insmod /lib/modules/led_pb_api.ko
/sbin/insmod /lib/modules/led_hw.ko
#broadcomm has made some LED control, so make it off. After this control moved, should delete it too.
/bin/echo 0300 > /proc/led
# LED show we are booting...
/usr/sbin/led_app on 70 ; /usr/sbin/led_app on 71

#/sbin/insmod /lib/modules/sc_blink.ko
#/sbin/insmod /lib/modules/ipt_psd.ko
#/sbin/insmod /lib/modules/ipt_random.ko
/sbin/insmod /lib/modules/ipt_REJECT.ko
/sbin/insmod /lib/modules/ipt_condition.ko
#/sbin/insmod /lib/modules/ct_mgr.ko
#/sbin/insmod /lib/modules/ipt_PNAT.ko
/sbin/insmod /lib/modules/ipt_http_string.ko
/sbin/insmod /lib/modules/ipt_dnshj.ko
/sbin/insmod /lib/modules/ipt_DLOG.ko
/sbin/insmod /lib/modules/xt_ct_dir.ko

/sbin/insmod /lib/modules/cnapt_core.ko
/sbin/insmod /lib/modules/cnapt.ko
#/sbin/insmod /lib/modules/cui.ko
/sbin/insmod /lib/modules/cpt.ko
/sbin/insmod /lib/modules/cpm.ko
/sbin/insmod /lib/modules/calg.ko
/sbin/insmod /lib/modules/cdmz.ko
/sbin/insmod /lib/modules/cudp.ko
/sbin/insmod /lib/modules/hairpin.ko
/sbin/insmod /lib/modules/natlimit.ko

#insert rtsp alg modules, may need stun arguments later
#/sbin/insmod /lib/modules/nf_conntrack_rtsp.ko
#/sbin/insmod /lib/modules/nf_nat_rtsp.ko

#ipv6
insmod /lib/modules/ip6_tables.ko
insmod /lib/modules/ip6table_filter.ko
insmod /lib/modules/ip6table_raw.ko
insmod /lib/modules/ip6table_mangle.ko
insmod /lib/modules/ip6t_LOG.ko
#insmod /lib/modules/ip6t_REJECT.ko
insmod /lib/modules/nf_conntrack_ipv6.ko

#insert SPI firewall module
/etc/do.sh
#add for vpn
mknod /dev/spu c 233 0
/sbin/insmod /lib/modules/ipt_vpntrigger.ko
/usr/sbin/spuctl start
# mike add wifi modules
#/sbin/insmod /lib/modules/2.6.22/kernel/drivers/net/emf/emf.ko
#/sbin/insmod /lib/modules/2.6.22/kernel/drivers/net/igs/igs.ko
#/sbin/insmod /lib/modules/2.6.22/kernel/drivers/net/wl/wl.ko
#/sbin/insmod /lib/modules/wifi_statistics.ko

#/usr/sbin/led_app on 70

/bin/echo "insmod finish" > /dev/console
# Add for web slow response

#echo "Start usbdecting ..."
#/sbin/udevstart

#echo "/sbin/udev" > /proc/sys/kernel/hotplug
#/usr/sbin/usbdect &

# for retrain margin the rc.sh is generate in rc/Makefile
#/usr/sbin/rc.sh

# start services
#/usr/sbin/rc lan init
#/usr/sbin/rc lan start

# Use vconfig to simulate LAN and WAN. LAN - 1 WAN - 2
#/sbin/vconfig add eth0 1
#/sbin/vconfig add eth0 2
#/sbin/ifconfig eth0.1 up
#/sbin/ifconfig eth0.2 up
#/usr/sbin/brctl addif br0 eth0.1
#/sbin/ifconfig eth1 up

#/usr/sbin/brctl addbr br1
#/usr/sbin/brctl stp br1 no

# start brcm switch
/usr/sbin/swmdk &
/bin/sleep 2

# stamp lan start time
/bin/cp /proc/uptime /tmp/lan_uptime

ifconfig lo 127.0.0.1
route add -net 127.0.0.0 netmask 255.0.0.0 lo

#JIM force to use IGMP v2
#modify to 3 for netgear spec 1.9
echo "3" > /proc/sys/net/ipv4/conf/all/force_igmp_version

#Modify icmp time for netgear spec 1.9
# debug staff
#/usr/sbin/micro_inetd 23 /usr/sbin/utelnetd&

#/usr/sbin/utelnetd -d&
cp -f /usr/sbin/setupwizard.cgi /tmp/setupwizard.cgi
/sbin/klogd&

# Move up by Joel for DG834NR WPA function.
/usr/sbin/cmd_agent_ap

echo 2 > /proc/sys/net/ipv6/conf/all/forwarding
#IPV6_LOGO
#echo 1 > /proc/sys/net/ipv6/conf/all/force_mld_version
#echo 1 > /proc/sys/et/ipv6/conf/default/force_mld_version
#IPV6_LOGO(END)
echo 1 > /proc/sys/net/ipv6/conf/all/autoconf
echo 1 > /proc/sys/net/ipv6/conf/default/autoconf

# set default, do not autoconf with RA pinfo (prefix info)
echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra_pinfo
echo 0 > /proc/sys/net/ipv6/conf/default/accept_ra_pinfo

# config rtk switch vlan disable
#/bin/echo 0 > /proc/rtk_vlan_support

# config rtl as gateway mode
#/bin/echo 0 > /proc/sw_nat

#close wan_unknowmac2cpu, only enable this when detecting
#/bin/echo 0 > /proc/wan_unknowmac2cpu

#mount
mount -a
/bin/sleep 1
if [ ! -e '/config/nvram/ready' ]
then
    /bin/echo "mount scnvram failed, calling eraseall " > /dev/console
    /bin/flash_eraseall -j /dev/mtd3
	/bin/mount mtd:scnvram
	/bin/touch  /config/nvram/ready
fi

if [ ! -e '/mnt/smt/ready' ]
then
    /bin/echo "mount smt failed, calling eraseall " > /dev/console
    /bin/flash_eraseall -j /dev/mtd15
	/bin/mount mtd:smt
	/bin/touch  /mnt/smt/ready
fi
/bin/echo "=============mount finished " > /dev/console

# for DGND4000 disable 802.3az, fix the compatibility with wndr4700
/bin/echo 1: > /var/mdksh
/bin/echo seti reg 0x9200 0x00 >> /var/mdksh
/bin/echo geti reg 0x9200 >> /var/mdksh
/bin/echo quit >> /var/mdksh
echo SHELL > /var/mdkshell

# insert prepare_3g for 3g function
[ -f /etc/prepare_3g ] && /etc/prepare_3g

/usr/sbin/rc_app/rc_init 
#/usr/sbin/ft_tool&
/usr/sbin/scfgmgr&

/bin/echo "=============rc start " > /dev/console
/usr/sbin/rc start
/bin/echo "=============rc finish " > /dev/console

/bin/ps

/usr/sbin/rc upnp start

#/usr/sbin/dproxy -c /etc/resolv.conf&


/usr/sbin/crond_sc &

#/usr/sbin/atm_monitor init
/usr/sbin/multi_pb_app 90 91 92 10 40&

/usr/sbin/wps_ledctrl &
/usr/sbin/wlevt

#Ron add for upnpd
route add -net 239.0.0.0 netmask 255.0.0.0 br0
#route add -net 239.0.0.0 netmask 255.0.0.0 br1

#echo "0 0" > /proc/sys/vm/pagetable_cache
# router
echo 1 > /proc/sys/net/ipv4/ip_forward
# pppox
echo 1 > /proc/sys/net/ipv4/ip_dynaddr

#arp ignore
echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore

# add more conntrack
echo 4608 > /proc/sys/net/nf_conntrack_max

# ignore_all not yet used: this should be satisfactory
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts

# set to 1 for lan static route, when wan is not up and ip_forward is 0.
echo 1 > /proc/sys/net/ipv4/conf/br0/forwarding
echo 1 > /proc/sys/net/ipv4/conf/wlan0/forwarding
echo 1 > /proc/sys/net/ipv4/conf/wlan0-va0/forwarding

# drop spoofed addr: turn this off when rip is on ?
# turn off for performance when fast_path is enabled
echo 1 > /proc/sys/net/ipv4/conf/eth1/rp_filter
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
# do not honor source route flags
echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
# this needs proper sampling on av_blog to determine optimal value
# for now just observe softnet_stats to see # time was throttled
# historical value was 300
echo 100 > /proc/sys/net/core/netdev_max_backlog
#Modify icmp time for netgear spec 1.9
echo 300 > /proc/sys/net/ipv4/netfilter/ip_conntrack_generic_timeout
echo 300 > /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout_stream
echo 300 > /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout
echo 60 > /proc/sys/net/ipv4/netfilter/ip_conntrack_icmp_timeout
echo 1800 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_established
echo 60 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_syn_sent

#remove session after get 2dirs FIN without timeout ? 
#BillGuo: we'd better not do this. FIN ACK packets may not be received yet. if we drop the session immediately,
#the FIN ACK packets will be treated as invalid NEW state, which (from lan) will go to wan without NAT or (from wan) be treated as ACK scan. 
echo 10 > /proc/sys/net/ipv4/netfilter/ip_conntrack_tcp_timeout_time_wait

#usr/sbin/rc wan start &
#bin/sleep 5;usr/sbin/wan_monitor &
# LED show we have boot finished
#/usr/sbin/led_app off 71 ; /usr/sbin/led_app on 70
#/usr/sbin/led_app off 74

#/bin/ps
#/bin/sleep 5
#/bin/sh

/bin/sleep 60
/sbin/insmod /lib/modules/usbserial_filter.ko
/sbin/insmod /lib/modules/GPL_NetUSB.ko
/sbin/insmod /lib/modules/NetUSB.ko

/bin/ps
#/bin/sleep 15
#/usr/sbin/rc check_fw start
