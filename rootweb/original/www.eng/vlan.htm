<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="Pragma" content="no-cache"><meta http-equiv="Cache-Control" content="no-cache"><meta http-equiv="Expires" content="Mon, 06 Jan 1990 00:00:01 GMT"><meta name="description" content="@model_name#_multilangual"><title>NETGEAR Router @model_name#</title><script language="javascript" type="text/javascript" src="string.js"></script><link rel="stylesheet" href="style/form.css"><script language="javascript" type="text/javascript" src="funcs.js"></script><!-- link rel="stylesheet" href="form.css" --><style type="text/javascript">
	classes.num.all.fontFamily = "Courier";
	classes.num.all.fontSize = "10pt" ;
</style><script language="javascript" type="text/javascript" src="utility.js"></script><script language="javascript" type="text/javascript" src="linux.js"></script><script language="javascript" type="text/javascript">
<!-- hide script from old browsers
if (typeof Array.prototype.splice == "undefined") {
  Array.prototype.splice = Array_splice
}
	var port_num = parseInt("@portn#");
 	var vlan_num = parseInt("@vlann#");
	var port_vlan_map="@h_vlan_map#";  //ex: "5,2,2,2"     this means port1:VLAN5   port 2,3,4: VLAN2
	var interface = "@interface#"; //all interfaces "wan0,eth0,eth1,eth2,wlan0,wlan2,wlan3,vlan0,vlan1,vlan2,vlan3,nas1"
	var group_num = parseInt("@groupn#");
	var group_map="@group_map#"; //[wan0,wlan0,vlan0:wan1,wlan1,vlan1:...] // symbol : separate each group
	var group_mode="@group_mode#"; // redefine group_mode
	var group_mode_Arr;
	var tags_map="@alltags#"; //"11,22,33,44,..."
	var current_mode; //0:port  1:tag
	var cleanGroupMsg = getErrorMsgByVar("gsm_cleanGroupMsg");
	var path_mappingMsg = getErrorMsgByVar("gsm_path_mappingMsg")+cleanGroupMsg;
	var ipWarningMsg = getErrorMsgByVar("gsm_ipWarningMsg");
	var groupChangeMsg = getErrorMsgByVar("gsm_groupChangeMsg");
	var cleanWanMsg = getErrorMsgByVar("gsm_cleanWanMsg");
	var applyWarningMsg =  groupChangeMsg + ipWarningMsg;
	var tagsArr = tags_map.split(",");
	if(tagsArr.length!=vlan_num) {
		if (vlan_num > tagsArr.length){
			for (var i=0;i<( vlan_num - tagsArr.length);i++){
				tags_map+=",";
			}
		}
		tagsArr = tags_map.split(","); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	}
	var port_vlanArr = port_vlan_map.split(","); //[5][2][2][2]  this means port0:VLAN5   port 1,2,3: VLAN2
	if(port_vlanArr.length!=port_num) {
		if (port_num > port_vlanArr.length){
			for (var i=0;i<( port_num - port_vlanArr.length);i++){
				port_vlan_map+=",";
			}
		}
		port_vlanArr = port_vlan_map.split(","); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	}
	var interfaceArr = interface.split(","); //[wan0][eth0][eth1][eth2][wlan0][wlan2]...
	var interfacen = interfaceArr.length;
	var groupArr = group_map.split(":"); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	if(groupArr.length != group_num){
		//alert("MAJOR ERROR: nvram groupn:"+group_num+  " does not match with group_map:"+ groupArr.length +". group_map err!");
		if (group_num > groupArr.length){
			for (var i=0;i<( group_num - groupArr.length);i++){
				group_map+=":";
			}
		}
		groupArr = group_map.split(":"); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	}
	//------------------- transfor 1D into 2D array ------------------------
	for(var i=0;i<group_num;i++){
		if(groupArr[i] == undefined)
			groupArr[i] = new String("");
		groupArr[i] = groupArr[i].split(","); // [wan0,wlan0,vlan0] ---> [wan0][wlan0][vlan0]
	}
/*
	(1)	at most one vlan interface
	(2)	any number of wlan interface
	(3)	at most one wan interface and only one interface group can have phone port.
*/
//-----------------------------------------copy from wan.htm------------------------------
var wan_number = "@all_wan_number#";
var wan_name_all = "@wan_name_all#";
//alert("all:"+wan_name_all);
//alert("jppppp");
var wan_nameArr = wan_name_all.split(",");
if(wan_nameArr.length!=wan_number)
	wan_nameArr=Array(wan_number); //prevent error
if(wan_nameArr.length != wan_number){
	alert("MAJOR ERROR: nvram pvcn:"+wan_number+  " does not match with wan_names:"+ wan_nameArr.length +"!");
}
autoNameWan(); //preven wanX without a name
function autoNameWan(){
	var n;
	for (n=0;n<wan_nameArr.length;n++){
		if (wan_nameArr[n].length==0){
			wan_nameArr[n] = "WAN"+(n+1);
		}
	}
}
//^^^^^^^^^^^^^^^^^^^^^^^^^^copy from wan.htm ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
function onClickInterfaceList(){
	var cf = document.forms[0];
	if (cf.interfaceList.options.length>0){
		cf.add.disabled=0;
	}
}
function onClickGroup_if_List(){
	var cf = document.forms[0];
	if (cf.group_if.options.length>0){
		cf.remove.disabled=0;
	}
}
function hasVlan(garr){ //FIREFOX bug, generate error when string not found!!!!
	var index, search;
	var cf = document.forms[0];
	if(cf.vlan_mode[0].checked)//port base
		search = "VLAN";
	else
		search = "TAG";
	index = searchArr(search,garr);
	if (index != -1)
		return true;
	else
		return false;
}
function hasWan(garr)
{
	var found1=false;
	var found2=false;
	var index = searchArr("WAN",garr);
	if (index>=0)
		found1=true;
	for(var k=0;k<garr.length;k++)
	{
		if(garr[k].length!=0)
		{
			if(searchArr(garr[k],wan_nameArr)>=0){//found it
				found2=true;
			}
		}
	}
	//alert("index:"+index  +"   garr index:"+searchArr(garr[k],wan_nameArr)+"  found1:"+found1+ " found2:"+found2);
	if(found1||found2)
		return true;
	else
		return false;
}
function count_wan_if(garr)
{
	var count=0;
	for(var k=0;k<garr.length;k++)
	{
		if(garr[k].length!=0)
		{
			if(garr[k].indexOf("WAN") >=0 || searchArr(garr[k],wan_nameArr)>= 0 ){ //found it
				count ++;
			}
		}
	}
	return count;
}
function rm_wan_if(garr)
{
	var cf = document.forms[0];
	var g_idx = cf.groupBox.selectedIndex;
	for(var k=garr.length-1; k >=0;k--)
	{
		if(garr[k].length!=0)
		{
			if(garr[k].indexOf("WAN") >=0 || searchArr(garr[k],wan_nameArr)>= 0 ){ //found it
				interfaceArr.push(garr[k]);
				garr.splice(k,1);
			}
		}
	}
	groupArr[g_idx]=garr; //update the target array
	show_interface();
	show_group_list();
}
function show_config_port_vlan(){
	for(var i=0;i<port_num;i++){
			if (port_vlanArr[i]!=undefined){
		  if(parseInt(port_vlanArr[i])<vlan_num){
				eval("document.forms[0].port" + i +  "[" + parseInt(port_vlanArr[i]) +  "].checked = 1");
			}
		}
	}
}
function find_wan_num(name){
	for(var n=0;n<wan_nameArr.length;n++){
		if(name==wan_nameArr[n]){
			return num;
			break;
		}
	}
	return -1; //found no match!! (SYSTEM ERROR!!!)
}
function debug(title){
	var tmp="";
	var sep = " ......";
	var bk = "\n";
	tmp += "DEBUG: "+title+bk+bk;
	tmp += "interfaceArr.len= "+interfaceArr.length+bk;
	tmp += "interfaceArr[]= "+interfaceArr+bk;
	//tmp += "port_vlan_arr.len= "+port_vlanArr.length+bk;
	//tmp += "port_vlan_arr[]= "+port_vlanArr+bk;
	tmp += "groupArr.len= "+groupArr.length+bk;
	for(var x=0;x<groupArr.length;x++){
		tmp += "groupArr[" + x + "]="+groupArr[x]+sep+groupArr[x].length+bk;
	}
	alert(tmp);
}
function name2wan(){
	var loop=0;
	for (var k=0;k<wan_nameArr.length;k++){
		for(var n=0;n<interfaceArr.length;n++){
			if(interfaceArr[n]==wan_nameArr[k]){
				interfaceArr[n] = "WAN"+(k+1); //wanX
				n=999; //exit only this loop
			}
		}
		for(var n=0;n<groupArr.length;n++){
			loop=groupArr[n].length; //firefox BUG: we can't directly access .length property in for loop
			for(var x=0;x<loop;x++){
				//alert("n="+n+"   groupArr[n].len:" +groupArr[n].length);
				if(groupArr[n][x]==wan_nameArr[k]){
					groupArr[n][x] = "WAN" +(k+1);
					x=999;
					n=999;
				}
			}
		}
	}
}
function wan2name(){
	var wanX;
	var loop=0;
	for (var k=0;k<wan_nameArr.length;k++){
		wanX = "WAN"+(k+1);
		for(var m=0;m<interfaceArr.length;m++){
			if(interfaceArr[m]==wanX){
				interfaceArr[m] = wan_nameArr[k]; //get name
				n=999; //exit only this loop
			}
		}
		for(var n=0;n<groupArr.length;n++){
			//debug("looking for "+wanX+ " and   n="+n+"    groupArr[n].len= "+groupArr[n].length);
			loop=groupArr[n].length; //firefox BUG: we can't directly access .length property in for loop
			for(var x=0;x<loop;x++){
				if(groupArr[n][x].indexOf(wanX) != -1 ){
					groupArr[n][x] = wan_nameArr[k]; //get name
					x=999;
					n=999;
				}
			}
		}
	}
}
function tag2port(){
	for(var n=0;n<interfaceArr.length;n++){
		interfaceArr[n] = interfaceArr[n].replace("TAG","VLAN");
	}
	for(var n=0;n<groupArr.length;n++){
		for(var x=0;x<groupArr[n].length;x++){
			groupArr[n][x] = groupArr[n][x].replace("TAG","VLAN");
		}
	}
	show_interface();
	show_group_list();
}
function port2tag(){
	for(var n=0;n<interfaceArr.length;n++){
		interfaceArr[n] = interfaceArr[n].replace("VLAN","TAG");
	}
	for(var n=0;n<groupArr.length;n++){
		for(var x=0;x<groupArr[n].length;x++){
			groupArr[n][x] = groupArr[n][x].replace("VLAN","TAG");
		}
	}
	show_interface();
	show_group_list();
}
function show_group()
{
	var tmp = "";
	for(var i = 0; i < group_num; i++){
            tmp += '<option value='+ i + '>' + getErrorMsgByVar("gsm_GROUP") + (i+1) +'</option>';
        }
    document.write(tmp);
}
function show_group_list(){
	var cf = document.forms[0];
	var garr =  groupArr[cf.groupBox.selectedIndex]; //when not selected, selectedIndex become -1 ?
	cf.group_if.options.length=0; //flush out all the items
	for(i=0;i<garr.length;i++){
		if(garr[i].length != 0)
			cf.group_if.options[i] = new Option(garr[i], garr[i]);
	}
}
function show_tags(){
	var tmp="";
	if(vlan_num<1){
		alert(getErrorMsgByVar("gsm_inv_vlan_num"));
		return false;
	}
	for(var i = 0; i < vlan_num; i++){
		if(tagsArr[i]!=undefined)
			tmp+='<tr><td colspan="">'+getErrorMsgByVar("gsm_Tag")+' '+ (i+1) +':</td><td><input type="text" class="num" name="tags" value="' + tagsArr[i] +  '" size="18" maxlength="4" onKeyPress="return numbersonly(this, event)"></td></tr>';
		else
			tmp+='<tr><td colspan="">'+getErrorMsgByVar("gsm_Tag")+' '+ (i+1) +':</td><td><input type="text" class="num" name="tags" value="" size="18" maxlength="4" onKeyPress="return numbersonly(this, event)" ></td></tr>';
	}
    document.write(tmp);
}
function show_interface()
{
	var cf = document.forms[0];
	cf.interfaceList.options.length=0;//flush out all the items
	for(i=0;i<interfaceArr.length;i++){
		cf.interfaceList.options[i] = new Option(interfaceArr[i], interfaceArr[i]);
	}
}
function set_port_vlan(selectedPort, selectedVlan){
	var cf = document.forms[0];
	port_vlanArr[selectedPort] = ""+selectedVlan; //convert int to string
	cf.h_vlan_map.value = port_vlanArr.join(",");
}
function pushIntoArray(arr,item){
	if(arr.length==1){
		if(arr[0].length==0){
			arr[0] = item;
		}
		else{
			arr.push(item);
		}
	}
	else{
		arr.push(item);
	}
	return arr;
}
function add_interface()
{
	var cf = document.forms[0];
	var iflist = cf.interfaceList;
	var g_idx = cf.groupBox.selectedIndex;
	var item;
	var success=1;
	var garr =  groupArr[g_idx]; //get the target array
	var if_idx;
	for(var x=0;x<iflist.options.length;x++) //search through the interfaceList
	{
		if(iflist.options[x].selected) //for all selected items
		{
			item = iflist.options[x].value;
			if(item.indexOf("TAG")>=0){ //if the new item is vlanX
				if(hasVlan(garr)){//target array already has vlan
					alert(getErrorMsgByVar("gsm_cancel_one_tag_only"));
					success = 0;
					break;
				}
			}
			if(item.indexOf("VLAN")>=0){ //if the new item is vlanX
				if(hasVlan(garr)){//target array already has vlan
					alert(getErrorMsgByVar("gsm_cancel_one_vlan_only"));
					success = 0;
					break;
				}
			}
			if((item.indexOf("WAN")>=0)||(searchArr(item,wan_nameArr)>=0)){ //if the new item is wanX
				if(hasWan(garr)){//target array already has wan
					alert(getErrorMsgByVar("gsm_cancel_one_wan_only"));
					success = 0;
					break;
				}
			}
/*
			if((item.indexOf("WAN")>=0)||(searchArr(item,wan_nameArr)>=0)){ //if the new item is wanX
				if(hasWan(garr) && group_mode_Arr[g_idx] == "0"){//target array already has vlan
					alert("Action canceled: only one WAN can be assigned to a group.");
					success = 0;
					break;
				}
			}
*/
			garr = pushIntoArray(garr,item);
			if_idx = searchArr(item,interfaceArr);
			if (if_idx==-1) alert("critical: if_idx == -1");
			interfaceArr.splice(if_idx,1);
		}
	}
	groupArr[g_idx]=garr; //update the target array
	//alert(groupArr[cf.groupBox.selectedIndex]); alert(interfaceArr);
	show_interface();
	show_group_list();
}
function remove_interface(){
	var cf = document.forms[0];
	var iflist = cf.group_if;
	var g_idx = cf.groupBox.selectedIndex;
	var item;
	var success=1;
	var garr =  groupArr[g_idx];
	var if_idx;
	if(g_idx==0){ // For group1
		success = 0;
		for(x=0;x<iflist.options.length;x++){ //search through the group_if list
			if(!iflist.options[x].selected){ // for all non selected items,
				item = iflist.options[x].value;
				if( item.indexOf("VLAN1") >= 0 || item.indexOf("TAG1") >= 0) {
					success = 1;
					break;
				}
			}
		}
	}
	if(success == 1)
	{
		for(x=0;x<iflist.options.length;x++){ //search through the group_if list
			if(iflist.options[x].selected){ //for all selected items
				item = iflist.options[x].value;
				interfaceArr.push(item);
				if_idx = searchArr(item,garr);
				if (if_idx==-1) alert("idx == -1");
				garr.splice(if_idx,1);
			}
		}
	}else{
		alert(getErrorMsgByVar("gsm_g1_incl_vlan1"));
	}
	groupArr[g_idx]=garr; //update the target array
	show_interface();
	show_group_list();
}
function reset_vlan_interface(){
	var cf = document.forms[0];
	var GroupArr;
	for( var x =0 ; x < groupArr.length ; x ++)
	{
		for(var k=groupArr[x].length-1; k >=0;k--)
		{
			if(groupArr[x][k].length!=0)
			{
				if(groupArr[x][k].indexOf("VLAN") >=0 || groupArr[x][k].indexOf("TAG") >=0 ){ //found it
					groupArr[x].splice(k,1);
				}
			}
		}
	}
	for(var k=interfaceArr.length-1; k >=0;k--)
	{
		if(interfaceArr[k].length!=0)
		{
			if(interfaceArr[k].indexOf("VLAN") >=0 || interfaceArr[k].indexOf("TAG") >=0 ){ //found it
				interfaceArr.splice(k,1);
			}
		}
	}
	if (cf.vlan_mode[0].checked){
		groupArr[0].push("VLAN1");
		interfaceArr.push("VLAN2");
		interfaceArr.push("VLAN3");
		interfaceArr.push("VLAN4");
	}
	else{
		groupArr[0].push("TAG1");
		interfaceArr.push("TAG2");
		interfaceArr.push("TAG3");
		interfaceArr.push("TAG4");
	}
	show_interface();
	show_group_list();
}
function searchArr(str,arr){ //search through the array and return the index of the first occurance of str
	for(i=0;i<arr.length;i++){
		if(arr[i].indexOf(str)>=0){ //fireFox bug. it does not recognize that garr is an array
			return i;
			break;
		}
	}
	return -1;
}
function setInterfaceRemained(){
	var ifArr = interfaceArr;
	var tmp = groupArr.join(","); //we need to convert Arry into string, so that comparison is possible
	for(x=0;x<ifArr.length;x++){
		if(tmp.indexOf(ifArr[x])>=0){
			removeElemFromArray(ifArr[x], interfaceArr);
			x--; //index value should shift back 1 so that next element is not skipped
		}
	}
	show_interface();
	show_group_list();
}
function removeElemFromArray(elem, arr){
	for(x=0;x<arr.length;x++){
		if(arr[x]==elem){
			arr.splice(x,1);
			break;
		}
	}
}
function arrayToHidden(){
	var cf = document.forms[0];
	var result;
	tag2port();// !!! user sees tagX but data is saved in vlanX format !!!!
	name2wan();
/*
	if(cf.ifmap_enable.checked){
		cf.group_map.value="vlan1,wan1";
	}
	else
	{
*/
		for(var x=0;x<groupArr.length;x++)
		{
			result = groupArr[x].join(",");
			groupArr[x]=result;
		}
		result = groupArr.join(":");
		cf.group_map.value=result;
/*
	}
*/
	cf.h_vlan_map.value = port_vlanArr.join(",");
	for(var s=0;s<tagsArr.length;s++)
	{
		tagsArr[s] = cf.tags[s].value;
	}
	cf.alltags.value = tagsArr.join(",");
}
function decide_mode()
{
	var cf = document.forms[0];
	if (cf.vlan_mode[0].checked){
		setDivs_port();//port base
	}else{
		setDivs_tag(); //tag base
	}
}
function clean_grp_except_grp1()
{
    var cf = document.forms[0];
	var tmp_group_map = new String("VLAN1");
	groupArr = tmp_group_map.split(":");
	if (group_num > groupArr.length){
		for (var i=0;i<( group_num - groupArr.length);i++){
			tmp_group_map+=":";
		}
		groupArr = tmp_group_map.split(":"); //[wan0,wlan0,vlan0], [wan1,wlan1,vlan1], ... // symbol : separate each group
	}
	for(var i=0;i<group_num;i++){
		if(groupArr[i] == undefined)
			groupArr[i] = new String("");
		groupArr[i] = groupArr[i].split(","); // [wan0,wlan0,vlan0] ---> [wan0][wlan0][vlan0]
	}
    var vlan_str = "";
    var interface_new = interface;
    for(var i=0; i<vlan_num; i++)
    {
       vlan_str += "VLAN" + (i+1) + ",";
    }
    interfaceArr = interface_new.split(",");//reload interface list
	wan2name();
	setInterfaceRemained();
}
function setDivs_port(){
	document.all("portDIV").style.display = showit;
	document.getElementById("tagDIV").style.display = hideit;
	tag2port();
	current_mode = 0;
}
function setDivs_tag(){
	document.all("portDIV").style.display = hideit;
	document.getElementById("tagDIV").style.display = showit;
	port2tag();
	current_mode = 1;
}
function onClick_port(myfield){
	if (current_mode==1){
//		alert(cleanGroupMsg);
//		clean_grp_except_grp1();
		current_mode = 0;
	}
	reset_vlan_interface();
	setDivs_port();
}
function onClick_tag(myfield){
	if (current_mode==0){
//		alert(cleanGroupMsg);
//		clean_grp_except_grp1();
		current_mode = 1;
	}
	reset_vlan_interface();
	setDivs_tag();
}
// show 	"Port 4	Port 3 	Port 2 	Port 1 "
function show_first_row(){
	var tmp = "";
	//for(var i = port_num; i >= 1; i--)
	for(var i = 1; i <= port_num; i++)
	{
		tmp += '<td class="ListH" align="center"><span class="thead">'+getErrorMsgByVar("gsm_msg_usb_port")+' '+i+' </span></td>';
	}
	document.write(tmp);
}
//				"Port 4	Port 3 	Port 2 	Port 1 "
// show 	"VLAN 1	v						"
// show 	"VLAN 2			v				"
// show 	"VLAN 3					v		"
// show 	"VLAN 4							v"
/*
function show_vlan_port(){
	var tmp = "";
	for(var j = 0; j < vlan_num; j++){
		tmp += '<tr><td class="ListH" align="center"><span class="thead">VLAN '+(j+1)+'</span></td>'
		for(var i = 0; i <port_num; i++)
		{
			if( i == j)
				tmp += '<td align="center"><b>O</b></td>'
			else
				tmp += '<td align="center">&nbsp;</td>'
		}
		tmp += '</tr>';
	}
	document.write(tmp);
}
*/
function show_vlan_port()
{
    var tmp = "";
    for(var j = 0; j < vlan_num; j++){
        tmp += '<tr><td align="center"><span class="thead">VLAN '+(j+1)+'</span></td>'
        for(var i = 0; i <port_num; i++)
        {
            tmp += '<td align="center"><input type="radio" name="port'+i+'" value="'+j+'" onClick="set_port_vlan('  + i +   ', ' + j + ')"></td>\n'
        }
        tmp += '</tr>';
    }
    document.write(tmp);
}
function show_vlan_port2(){
	var tmp = "";
	for(var j = 0; j < vlan_num; j++){
		tmp += '<tr><td class="ListH" align="center"><span class="thead">VLAN '+(j+1)+'</span></td>'
		for(var i = 0; i <port_num; i++)
		{
			if( j== 0)
				tmp += '<td align="center"><b>O</b></td>'
			else
				tmp += '<td align="center">&nbsp;</td>'
		}
		tmp += '</tr>';
	}
	document.write(tmp);
}
function enable_group(state)
{
	var cf = document.forms[0];
	//if(ifmap_present==1){
		if(state==true){
			cf.interfaceList.disabled=0;
			cf.group_if.disabled=0;
			cf.groupBox.disabled=0;
		}
		else{ //disabled
			cf.interfaceList.disabled=1;
			cf.group_if.disabled=1;
			cf.groupBox.disabled=1;
		}
	//}
	}
/*
function run_enable_ifmap(myfield)
{
	var cf = document.forms[0];
	if(myfield.checked ==true){
		cf.vlan_on.disabled = 1;
		cf.vlan_on.checked=false;
		setDivs_port();
		document.all("tagDIV").style.display = hideit;
		document.all("portDIV").style.display = hideit;
		cf.vlan_mode[0].disabled = 1;
		cf.vlan_mode[1].disabled = 1;
		enable_group(false);
		disable_vlan_other(1);
	}
	else{
		cf.vlan_on.disabled = 0;
		check_vlan_on_off();
	}
}
function onClick_enable_ifmap(myfield){
	run_enable_ifmap(myfield);
	alert(path_mappingMsg);
}
*/
function disable_vlan_other(disableIt){
	var cf = document.forms[0];
	for(var j = 0; j < vlan_num; j++)
	{
		for(var i = 0; i <port_num; i++)
		{
			eval("cf.port" + i +  "[" + j +  "].disabled = "+disableIt);
		}
	}
	for(var i = 1; i < vlan_num; i++)
	{
		cf.tags[i].disabled = disableIt;
	}
	cf.vlan_mode[0].disabled = disableIt;
	cf.vlan_mode[1].disabled = disableIt;
}
function check_vlan_on_off()
{
	var cf = document.forms[0];
	if (cf.vlan_mode[0].checked){
		setDivs_port();//port base
	}else{
		setDivs_tag(); //tag base
	}
	//cf.ifmap_enable.checked=false;
	cf.vlan_mode[0].disabled = 0;
	cf.vlan_mode[1].disabled = 0;
	enable_group(true);
	disable_vlan_other(0);
}
function onClick_enable_vlan(myfield){
	var cf = document.forms[0];
//	alert(cleanGroupMsg);
//	clean_grp_except_grp1();
	check_vlan_on_off();
	reset_vlan_interface();
}
function numbersonly(myfield, e, dec)
{
	var key;
	var keychar;
	if (window.event)
		key = window.event.keyCode;
	else if (e)
		key = e.which;
	else
		return true;
	keychar = String.fromCharCode(key);
// control keys
	if ((key==null) || (key==0) || (key==8) ||
		(key==9) || (key==13) || (key==27) )
		return true;
// numbers
	else if ((("0123456789").indexOf(keychar) > -1))
		return true;
// decimal point jump
	else if (dec && (keychar == "."))
	{
		myfield.form.elements[dec].focus();
		return false;
	}
	else
		return false;
}
function checkData()
{
	var cf = document.forms[0];
	if (current_mode == 1)
	{
		for(var i = 1; i < vlan_num; i++)
		{
			for(var x=1; x <vlan_num; x++)
			{
				if (i != x)
				{
					if (parseInt(cf.tags[i].value) == parseInt(cf.tags[x].value))
					{
						alert(getErrorMsgByVar("gsm_Tag")+" " + (i+1) + " "+getErrorMsgByVar("gsm_msg_rmt_setting_and")+" "+getErrorMsgByVar("gsm_Tag")+" " + (x+1) + " "+getErrorMsgByVar("gsm_same_value")+" [" + cf.tags[i].value +"]. "+getErrorMsgByVar("gsm_chang_one"));
					return false;
					}
				}
			}
			if (validTag(cf.tags[i],i) == false)
			{
				return false;
			}
		}
	}
	arrayToHidden();
	dataToHidden(document.forms[0]);
	alert(applyWarningMsg);
	return true;
}
function validTag(myfield,tagN)
{
	//0 : non-tagged
	//4095: reserved
	if(parseInt(myfield.value) < 1 || parseInt(myfield.value) > 4094)
	{
		alert(getErrorMsgByVar("gsm_Tag")+" "+(tagN+1)+" "+getErrorMsgByVar("gsm_must_tag_range"));
		myfield.vlaue= "";
		return false;
	}
}
/*
function show_ifmap()
{
	var cf = document.forms[0];
	if (parseInt(ifmap_present)==1)
	{
		document.all("pathDIV").style.display = showit;
		if( cf.vlan_on.checked==true)
		{
			cf.ifmap_enable.checked=false;
		}
		run_enable_ifmap(cf.ifmap_enable);
	}
	else{
		document.all("pathDIV").style.display = hideit;
	}
}
*/
//remove specified index
function Array_splice(index, delTotal) { // ex: (5, 2) --> delete 2 contiguos items start from index 5
	var temp = new Array()
	var response = new Array()
	var A_s = 0
	for (A_s = 0; A_s < index; A_s++) {
		temp[temp.length] = this[A_s]
	}
	for (A_s = 2; A_s < arguments.length; A_s++) {
		temp[temp.length] = arguments[A_s]
	}
	for (A_s = index + delTotal; A_s < this.length; A_s++) {
		temp[temp.length] = this[A_s]
	}
	for (A_s = 0; A_s < delTotal; A_s++) {
		response[A_s] = this[index + A_s]
	}
	this.length = 0
	for (A_s = 0; A_s < temp.length; A_s++) {
		this[this.length] = temp[A_s]
	}
	return response
}
function init() // initialize variables
{
/*
	var cf = document.forms[0];
	alert( "group_mode= " + group_mode );
	cf.group_mode.value="1,1,1,1,0,0,0,0"
*/
    dataToVisible(document.forms[0]);
	group_mode_Arr = group_mode.split(",");
	if( group_mode_Arr.length < group_num)
	{
		for ( var i=group_mode_Arr.length; i <= group_num;i++)
		{
			group_mode+=",0";	// default -> 0 -> router mode
		}
		group_mode_Arr = group_mode.split(",");
	}
	document.forms[0].elements[0].focus();
  
  decide_mode();
  wan2name();
  setInterfaceRemained();
  show_config_port_vlan();
  check_vlan_on_off();
	//set_group_mode_radio(0);
}
/*
function set_group_mode_radio( group_id )
{
	var cf = document.forms[0];
	if (group_mode_Arr[ group_id] == "0")
		cf.group_mode_radio[0].checked = true;
	else
		cf.group_mode_radio[1].checked = true;
}
function refresh_group_mode_radio()
{
	var cf = document.forms[0];
	var g_idx = cf.groupBox.selectedIndex;
	set_group_mode_radio(g_idx);
}
function refresh_group_mode_Arr()
{
	var cf = document.forms[0]
	var g_idx= cf.groupBox.selectedIndex
	var garr =  groupArr[g_idx]
	if( cf.group_mode_radio[0].checked )
	{
		group_mode_Arr[ g_idx] = "0"
		if( count_wan_if(garr) >1)
		{
			alert(cleanWanMsg);
			rm_wan_if(garr)
		}
	}
	else
	{
		group_mode_Arr[ g_idx] = "1"
	}
	cf.group_mode.value=group_mode_Arr.join(",")
}
*/
// -->
</script>
</head>
<body bgcolor="#ffffff" onLoad="init();disableForms(@disable_form#);">
<form method="POST" action="setup.cgi@post_par#">
<div class="page_title" languageCode = "726">VLAN Group Settings</div>
<div class="fix_button">
<table width="100%" border="0" cellpadding="0" cellspacing="2"><tr><td nowrap colspan="2" align="center">
<input class="cancel_bt" type="button" name="Cancel" value = "Cancel" onClick="location.href='vlan.htm'" languageCode = "19">
&nbsp;
<input class="apply_bt" type="SUBMIT" name="Apply" value = "Apply" onClick="return checkData();" languageCode = "18">
</td></tr></table>
</div>
<div id="main" class="main_top_button">
<table border="0" cellpadding="0" cellspacing="3" width="100%">
<tr>
	<td colspan="3">
	<input type="radio" name="vlan_mode" value="0" onClick="onClick_port();">
	<a href="javascript:loadhelp('vlan','port_vlan')" tabindex="-1"><span languageCode = "727">Port Based VLAN</span></a>
	</td>
</tr>
<tr>
	<td colspan="3">
	<input type="radio" name="vlan_mode" value="1" onClick="onClick_tag();">
	<a href="javascript:loadhelp('vlan','tag_vlan')" tabindex="-1"><span languageCode = "728">tag</span></a>
	</td>
</tr>
<tr>
  <td colspan="3" background="liteblue.gif" height="12">&nbsp; </td>
</tr>
<!--  VLAN / PORT MAP  -->
<tr><td colspan="3">
<!--
<div ID="portDIV">
<table width="100%">
<tr>
	<td><b>Port Based VLAN</b></td>
</tr>
<tr>
	<td nowrap>
	<table border="1" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<td align="center"><span class="thead">VLAN Group/Port </span></td>
		<script>show_first_row();</script>
	</tr>
	<script>show_vlan_port();</script>
	</table>
	</td>
</tr>
<tr>
  <td background="liteblue.gif" height="12">&nbsp; </td>
</tr>
</table></div>
-->
<div ID="portDIV">
<table width="100%">
<tr>
	<td>
	<TABLE class="tables" border="0" cellpadding="2" cellspacing="0" width="100%">
	<TR class="table_header">
		<td class="ListH" align="center"><span class="thead">VLAN Group/Port </span></td>
		<script>show_first_row();</script>
	</tr>
	<script>show_vlan_port();</script>
	</table>
	</td>
</tr>
<tr>
  <td background="liteblue.gif" height="12">&nbsp; </td>
</tr>
</table></div>
<!--  TAG TEXT INPUT  -->
<div ID="tagDIV" style="display:yes">
<table width="100%">
<script>show_tags();</script>
<tr>
	<td colspan="2">&nbsp;</td>
</tr>
<tr>
  <td colspan="2" background="liteblue.gif" height="12">&nbsp; </td>
</tr>
</table>
</div>
</td></tr>
<tr>
	<td colspan="3"><a href="javascript:loadhelp('vlan','grouping')" tabindex="-1"><b languageCode = "729">Interface Grouping</b></a></td>
</tr>
<tr>
	<td colspan="3">
<table width="100%">
<tr>
	<td colspan="3">
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
	<td width="33%">&nbsp;</td>
	<td width="34%">&nbsp;</td>
	<td width="33%" align="center">
		<select name="groupBox" size="1" onClick="show_group_list();" style="width:150px">
		<script>show_group()</script>
		</select>	</td>
</tr>
</table>
<BR>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
	<td width="33%" rowspan="4" align="center">
	<select name="interfaceList" size="12" multiple onClick="onClickInterfaceList();" style="width:150px">
	<script>show_interface();</script>
	</select>	</td>
<!--  ADD BT  -->
	<td width="34%" height="50" align="center" valign="bottom">
	<input class="add_bt" type="button"  name="add" value = "Add" onClick="add_interface();" disabled languageCode = "93"><BR></td>
<!--  GROUP LIST  -->
	<td width="33%" rowspan="4" align=center>
	<select name="group_if" size="12" multiple onClick="onClickGroup_if_List();" style="width:150px"> <!-- insert items dynamically -->
	<script>show_group_list()</script>
	</select>	</td>
</tr>
<!--  REMOVE BT  -->
<tr>
	<td align="center" valign="top" height="50">
	<br>
	<br>
	<input class="delete_bt" type="button"  name="remove" value = "Remove" onClick="remove_interface();" disabled languageCode = "730"></td>
</tr>
<!--
<tr>
	<td align="center" valign="bottom" height="50">
	<input type="radio" name="group_mode_radio" value="0" onClick="refresh_group_mode_Arr()">Router
	</td>
</tr>
<tr>
	<td align="center" valign="top" height="50">
	<BR><input type="radio" name="group_mode_radio" value="1" onClick="refresh_group_mode_Arr()">Bridge	</td>
</tr>
-->
</table>
	</td>
</tr>
<tr>
  <td colspan="3" background="liteblue.gif" height="12">&nbsp; </td>
</tr>
<tr>
	<td colspan="3" align="center"></td>
</tr>
</table>
<input type="hidden" name="todo" value="save">
<input type="hidden" name="h_vlan_map" value="@h_vlan_map#">
<input type="hidden" name="h_vlan_mode" value="@h_vlan_mode#">
<input type="hidden" name="h_vlan_on" value="@h_vlan_on#">
<input type="hidden" name="alltags" >
<input type="hidden" name="group_map" >
<input type="hidden" name="group_mode" value="@group_mode#">
<input type="hidden" name="this_file" value="vlan.htm">
<input type="hidden" name="next_file" value="group_pg.htm">
</td></tr></table></div>
</form>
<p></p>
<div id="help" style="display: none">
		<iframe name="help_iframe" id="helpframe" src="vlan_h.htm" allowtransparency="true" width="100%" frameborder="0">
		</iframe>
</div>
<div id="help_switch" class="close_help">
	 <img class="help_switch_img" src="image/help/help-bar.gif"><script>
var help_flag=0;
if(isIE()){
	show_hidden_help_top_button(1);
	var frame_div = top.document.getElementById("formframe_div");
	frame_div.onresize =  function(){
		if(help_flag == 0)  show_hidden_help_top_button(1);
		else{show_hidden_help_top_button(--help_flag);help_flag++;}
};}
if(get_browser() == "Opera"){
	window.onresize =  function(){
		if(help_flag == 0)  show_hidden_help_top_button(1);
		else{show_hidden_help_top_button(--help_flag);help_flag++;}
};}
</script><div id="help_space" onClick="show_hidden_help_top_button(help_flag); help_flag++;"></div>
<div id="help_center"><span languageCode="3016">Help Center</span></div>
<div id="help_button" onClick="show_hidden_help_top_button(help_flag); help_flag++;"></div>
<div id="help_show_hidden"><a href="javascript:void(0)" onClick="show_hidden_help_top_button(help_flag); help_flag++;"><span languageCode="3017">Show/Hide Help Center</span></a></div>
</div>
<script language="javascript" type="text/javascript" src="langs.js"></script></body></html>
